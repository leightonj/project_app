# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/projects" do
  # This should return the minimal set of attributes required to create a valid
  # Project. As you add validations to Project, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      title: Faker::Book.title,
      description: Faker::Lorem.paragraph,
    }
  end

  let(:invalid_attributes) do
    {
      title: nil,
      description: nil,
    }
  end

  before { sign_in(create(:user)) }

  describe "GET /index" do
    it "renders a successful response" do
      create_list(:project, 10)
      get projects_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      project = create(:project)
      get project_url(project)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_project_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      project = create(:project)
      get edit_project_url(project)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    before do
      create(:user)
    end

    context "with valid parameters" do
      it "creates a new Project" do
        expect do
          post projects_url, params: { project: valid_attributes }
        end.to change(Project, :count).by(1)
      end

      it "redirects to the created project" do
        post projects_url, params: { project: valid_attributes }
        expect(response).to redirect_to(project_url(Project.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Project" do
        expect do
          post projects_url, params: { project: invalid_attributes }
        end.not_to change(Project, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post projects_url, params: { project: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        {
          title: "My new title"
        }
      end

      it "updates the requested project" do
        project = create(:project)
        patch project_url(project), params: { project: new_attributes }
        project.reload
        expect(project.title).to eq("My new title")
      end

      it "redirects to the project" do
        project = create(:project)
        patch project_url(project), params: { project: new_attributes }
        project.reload
        expect(response).to redirect_to(project_url(project))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        project = create(:project)
        patch project_url(project), params: { project: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested project" do
      project = create(:project)
      expect do
        delete project_url(project)
      end.to change(Project, :count).by(-1)
    end

    it "redirects to the projects list" do
      project = create(:project)
      delete project_url(project)
      expect(response).to redirect_to(projects_url)
    end
  end

  describe "GET /event" do
    it "adds updates status and adds a comment to the project" do
      project = create(:project)
      get event_project_path(project, event: "start")
      project.reload
      expect(project.in_progress?).to be(true)
      expect(project.comments.last.text).to eq("Project changed to In progress")
    end
  end
end
